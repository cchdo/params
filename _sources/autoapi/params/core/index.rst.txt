:py:mod:`params.core`
=====================

.. py:module:: params.core


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   params.core.CFStandardName
   params.core.WHPName




.. py:class:: CFStandardName


   Dataclass representing a single CF Standard Name

   This class captures the information in the standard name table as properties.

   .. py:property:: cf

      Part of the `cf` interface, for :class:`CFStandardName` instances, just returns self


   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: canonical_units
      :type: str | None

      

   .. py:attribute:: grib
      :type: str | None

      

   .. py:attribute:: amip
      :type: str | None

      

   .. py:attribute:: description
      :type: str | None

      


.. py:class:: WHPName


   Dataclass representing a single exchange/WOCE style name + unit pair

   There is a ton of extra information that is meant for use in making CF/netCDF files.

   .. py:property:: full_whp_name


   .. py:property:: full_nc_name


   .. py:property:: full_error_name


   .. py:property:: key

      WHPNames are uniquely identified by a tuple of their (whp_name, whp_unit) values


   .. py:property:: odv_key
      :type: str

      An ODV style representation of the param in the form of "NAME [UNIT]"

      Note that the "[UNIT]" part is omitted if there are no units


   .. py:property:: nc_name_flag
      :type: str

      The variable name of the "flag" ancillary variable for this parameter


   .. py:property:: nc_name_error
      :type: str

      The variable name of the uncertainty ancillary variable for this parameter


   .. py:property:: data_type

      the actual python class for this WHPName's dtype

      This is useufl for parsing string values for this WHPName


   .. py:property:: cf
      :type: CFStandardName | None

      The :class:`CFStandardName` equivalent to this WHPName

      Returns none if there does not exist an equivalent :class:`CFStandardName`.


   .. py:attribute:: whp_name
      :type: str

      

   .. py:attribute:: nc_name
      :type: str

      

   .. py:attribute:: nc_group
      :type: str | None

      

   .. py:attribute:: rank
      :type: float

      

   .. py:attribute:: dtype
      :type: Literal[string, decimal, integer]

      

   .. py:attribute:: in_erddap
      :type: bool

      

   .. py:attribute:: field_width
      :type: int

      

   .. py:attribute:: whp_unit
      :type: str | None

      

   .. py:attribute:: flag_w
      :type: Literal[woce_discrete, woce_ctd, no_flags, woce_bottle] | None

      

   .. py:attribute:: cf_name
      :type: str | None

      

   .. py:attribute:: numeric_min
      :type: float | None

      

   .. py:attribute:: numeric_max
      :type: float | None

      

   .. py:attribute:: numeric_precision
      :type: int | None

      

   .. py:attribute:: description
      :type: str | None

      

   .. py:attribute:: note
      :type: str | None

      

   .. py:attribute:: warning
      :type: str | None

      

   .. py:attribute:: error_name
      :type: str | None

      

   .. py:attribute:: cf_unit
      :type: str | None

      

   .. py:attribute:: reference_scale
      :type: str | None

      

   .. py:attribute:: whp_number
      :type: int | None

      

   .. py:attribute:: scope
      :type: str

      

   .. py:attribute:: analytical_temperature_name
      :type: str | None

      

   .. py:attribute:: analytical_temperature_units
      :type: str | None

      

   .. py:attribute:: radiation_wavelength
      :type: float | None

      

   .. py:attribute:: scattering_angle
      :type: float | None

      

   .. py:attribute:: excitation_wavelength
      :type: float | None

      

   .. py:attribute:: emission_wavelength
      :type: float | None

      

   .. py:attribute:: alt_depth
      :type: int

      

   .. py:attribute:: whp_name_alias
      :type: str | None

      

   .. py:attribute:: whp_unit_alias
      :type: str | None

      

   .. py:attribute:: error_col
      :type: bool

      

   .. py:attribute:: flag_col
      :type: bool

      

   .. py:method:: as_depth(depth: int) -> WHPName


   .. py:method:: as_alias(param, unit) -> WHPName


   .. py:method:: as_error() -> WHPName


   .. py:method:: as_flag() -> WHPName


   .. py:method:: __eq__(other)

      :class:`WHPName`s are equivalent if their whp_name and whp_unit properties are equivalent


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __lt__(other)

      Sorts WHPNames based on their rank property


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: get_nc_attrs(error=False)

      a dict containing the netCDF variable attributes needed for CF compliance for this variable


   .. py:method:: strfex(value, flag: bool = False, numeric_precision_override: int | None = None, date_or_time: Literal[datetime.date, datetime.time] | None = None) -> str

      Format a value using standard WHP Exchange conventions:

      * dates are formatted as %Y%m%d
      * times are formatted as %H%M
      * fill values are "-999" for data, 9 for flags
      * for floating points, only NaN values are considered to be "fill", there
        are parameters which can have -999 as a real value

      :param value: the value to format as a string, the accepted inputs depends on the :class:`WHPName.dtype`,
                    dates and times are expected to be real `datetime.date` and `datetime.time` objects
      :param boolean flag: should `value` be interpreted as a WOCE flag
      :param int numeric_precision_override: if not None, will overrride the builtin databases :class:`WHPName.numeric_precision`
                                             when formatting floats

      :returns: `value` as a string for printing in a WHP Exchange file
      :rtype: str



